#include <stdint.h>

#include <stdio.h>

#include <stm32f405xx.h>

#define PERIPH_BASE        0x40000000

#define AHB1PERIPH_BASE    (PERIPH_BASE + 0x00020000)

#define RCC_BASE           (AHB1PERIPH_BASE + 0x3800)

#define RCC_AHB1ENR        (*(volatile unsigned int *)(RCC_BASE + 0x30))

#define GPIOA_BASE         (AHB1PERIPH_BASE + 0x0000)

#define GPIOA_MODER        (*(volatile unsigned int *)(GPIOA_BASE + 0x00))

#define GPIOA_IDR          (*(volatile unsigned int *)(GPIOA_BASE + 0x10))

#define GPIOC_BASE         (AHB1PERIPH_BASE + 0x0800)

#define GPIOC_MODER        (*(volatile unsigned int *)(GPIOC_BASE + 0x00))

#define GPIOC_ODR          (*(volatile unsigned int *)(GPIOC_BASE + 0x14))

#define LED_PIN            6  // PC6

#define IR_SENSOR_PIN      0  // PA0

void delay(volatile unsigned int s)

{

    for(; s>0; s--);

}

int main(void)

{

    // 1. Enable GPIOA and GPIOC clocks

    RCC_AHB1ENR |= (1 << 0); // GPIOA

    RCC_AHB1ENR |= (1 << 2); // GPIOC

    // 2. Configure GPIOA pin 0 as input (00)

    GPIOA_MODER &= ~(0x3 << (IR_SENSOR_PIN * 2));

    // 3. Configure GPIOC pin 6 as output (01)

    GPIOC_MODER &= ~(0x3 << (LED_PIN * 2)); // clear bits

    GPIOC_MODER |=  (0x1 << (LED_PIN * 2)); // set as output

    while (1)

    {

        if ( (GPIOA_IDR & (1 << IR_SENSOR_PIN)) )

        {

            // Turn ON LED

            GPIOC_ODR |= (1 << LED_PIN);

            delay(500000);

            // Turn OFF LED

            GPIOC_ODR &= ~(1 << LED_PIN);

            delay(500000);

        }

        else

        {

            // Ensure LED is OFF

            GPIOC_ODR &= ~(1 << LED_PIN);

        }

    }

}

